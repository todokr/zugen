@import zugen.core.document.MethodInvocationDiagramDocument.{Node, Edge}
@import zugen.core.document.MethodInvocationDiagramDocument.Node.{ExternalNode, InternalNode}
@import play.twirl.api.TwirlFeatureImports.defining

@(nodes: Seq[Node], edges: Seq[Edge])
digraph "Method Invocation Diagram" {
  graph [
    rankdir = LR
    charset = "UTF-8"
    bgcolor = "#343434"
    fontcolor = "#eeeeee"
    style = "filled"
  ]

  node [
    colorscheme = rdylgn11
    shape = box
    fontname="Arial"
    color = "#999999"
    fontsize = 10
    fontcolor = "#eeeeee"
    margin = 0.15
    style = "rounded"
  ]
  edge [
    arrowhead=vee
    tailport=e
    headport=w
    style = solid
    color = "#555555"
    penwidth = 0.5
    arrowsize = 0.5
  ]

  @for(edge <- edges) {
    @edge.from -> @edge.to
  }


  @for(node <- nodes) {
      @node match {
        case InternalNode(id, pkg, name, Some(fileUrl), _) => {@id [label = <<font align="left" point-size="8">@pkg</font><br align="left" />@name>, href="@fileUrl", target="_blank"]}
        case InternalNode(id, pkg, name, _, _)             => {@id [label = <<font align="left" point-size="8">@pkg</font><br align="left" />@name>]}
        case n: ExternalNode => {@n.id [label = <<font align="left" point-size="8">@n.pkg</font><br align="left" />@n.name>, color="#444444"]}
      }

    }

  @defining(nodes.filter(_.isTopLevel)) { topLevelNodes =>
    { rank = same;
    @for(node <- topLevelNodes) {
      @node.id;
    }
    }
  }

}
